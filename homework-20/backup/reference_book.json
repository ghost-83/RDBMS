[
    {
        "id": 25,
        "title": "Interesting array of properties. ",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">We write a config component:</p>\n<pre>\n<code class=\"java\">\n    package ru.alfastrahoms.orion.tfoms.exchange.g1.config;\n\n    import lombok.Data;\n    import org.springframework.beans.factory.annotation.Value;\n    import org.springframework.boot.context.properties.ConfigurationProperties;\n    import org.springframework.scheduling.annotation.Scheduled;\n    import org.springframework.scheduling.support.CronExpression;\n    import org.springframework.stereotype.Component;\n    import ru.alfastrahoms.orion.tfoms.exchange.g1.type.RegionCode;\n\n    import java.util.Map;\n    import java.util.Objects;\n    import java.util.Optional;\n\n    import static java.util.function.Predicate.not;\n\n    @Data\n    @Component\n    @ConfigurationProperties(prefix = \"orion\")\n    public class RegionSchedulingConfigurationProperty {\n\n        @Value(\"${orion.scheduling:true}\")\n        private Boolean globalEnabled;\n\n        @Data\n        public static class RegionScheduling {\n            private String cron;\n            private Boolean disabled = true;\n        }\n\n        Map<RegionCode, RegionScheduling> g1FileScheduling;\n\n        public String g1Cron(RegionCode regionCode) {\n            if (!globalEnabled)\n                return Scheduled.CRON_DISABLED;\n\n            return Optional\n                    .ofNullable(g1FileScheduling.get(regionCode))\n                    .filter(not(RegionScheduling::getDisabled))\n                    .map(byRegion -> Objects.requireNonNull(byRegion.cron))\n                    .map(c -> {\n                        if (CronExpression.isValidExpression(c)) {\n                            return c;\n                        } else {\n                            throw new IllegalArgumentException(c);\n                        }\n                    })\n                    .orElse(Scheduled.CRON_DISABLED);\n        }\n    }\n</code>\n</pre>\n\n<p class=\"gp\">Then create schedule:</p>\n<pre>\n<code class=\"java\">\n    package ru.alfastrahoms.orion.tfoms.exchange.g1.scheduler;\n\n    import lombok.RequiredArgsConstructor;\n    import lombok.extern.log4j.Log4j2;\n    import org.springframework.scheduling.annotation.EnableScheduling;\n    import org.springframework.scheduling.annotation.Scheduled;\n    import org.springframework.stereotype.Service;\n    import ru.alfastrahoms.orion.tfoms.exchange.g1.type.RegionCode;\n\n    @Log4j2\n    @Service\n    @EnableScheduling\n    @RequiredArgsConstructor\n    public class Region74Scheduler {\n\n        private final RegionEveryDayScheduler regionEveryDayScheduler;\n\n\n        @Scheduled(cron = \"#{@regionSchedulingConfigurationProperty.g1Cron('region-74')}\")\n        public void run() {\n            regionEveryDayScheduler.run(RegionCode.REGION_74);\n        }\n    }\n</code>\n</pre>\n\n<p class=\"gp\">Put data in the properties file:</p>\n<pre>\n<code class=\"jaml\">\n    orion:\n        scheduling: false\n\n        g1-file-scheduling:\n        region-74:\n            cron: 0 */1 * ? * *\n            disabled: false\n</code>\n</pre>\n\n<p class=\"gp\">Put data in the META-INF:</p>\n<pre>\n<code class=\"json\">\n    {\n        \"properties\": [\n            {\n            \"name\": \"orion.scheduling\",\n            \"type\": \"java.lang.Boolean\",\n            \"description\": \"Description for orion.scheduling.\"\n            }\n        ] \n    }\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "spring",
        "create": "05.09.2022 07:29:18",
        "update": "05.09.2022 07:57:08",
        "active": true
    },
    {
        "id": 24,
        "title": "Samba server",
        "text": "11111",
        "author": "admin",
        "userId": 1,
        "category": "linux",
        "create": "30.08.2022 10:57:56",
        "update": "30.08.2022 11:13:13",
        "active": false
    },
    {
        "id": 23,
        "title": "Реализация CompletableFuture (вызов в отдельном потоке)",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Для вызова в асинхронном потоке функции достаточно поместить ее в CompletableFuture:</p>\n<pre>\n<code class=\"java\">\n    @Scheduled(cron = \"0,10,20,30,40,50 * * * * *\")\n    public void scheduleTest() {\n        IntStream.range(1, 200).forEach(element -> {\n            CompletableFuture.runAsync(() -> {\n                try {\n                    // Тут наш код\n                    Thread.sleep(element * 1000L);\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(e);\n                }\n            });\n        });\n    }\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "java",
        "create": "19.06.2022 03:32:31",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 22,
        "title": "Своя Annotation в Spring",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Создаем annotation:</p>\n<pre>\n<code class=\"java\">\npackage ru.ghost.azrael.components.test;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface StringFromResource {\n    String value();\n}\n</code>\n</pre>\n<p class=\"gp\">Далее мы создаем компонент который implements BeanPostProcessor. При реализации метода мы получаем bean и реализуем нужную логику:</p>\n<pre>\n<code class=\"java\">\npackage ru.ghost.azrael.components.test;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.lang.Nullable;\nimport org.springframework.stereotype.Component;\n\nimport java.lang.reflect.Field;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\n@Slf4j\n@Component\npublic class StringFromResourceFileLoaderBeanPostProcessor implements BeanPostProcessor {\n\n    private static final Map<String, String> cache = new HashMap<>();\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, @Nullable String beanName) throws BeansException {\n\n        Field[] declaredFields = bean.getClass().getDeclaredFields();\n\n        for (Field field : declaredFields) {\n            StringFromResource annotation = field.getAnnotation(StringFromResource.class);\n            if (annotation == null) continue;\n\n            String value = annotation.value();\n            field.setAccessible(true);\n\n            try {\n                field.set(bean, cache.computeIfAbsent(value, (key) -> {\n                    log.error(\"add key!!!\");\n                    return key;\n                }));\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return BeanPostProcessor.super.postProcessBeforeInitialization(bean, Objects.requireNonNull(beanName));\n    }\n}\n</code>\n</pre>\n<p class=\"gp\">После получаем результат при рейлизации аннотации:</p>\n<pre>\n<code class=\"java\">\npackage ru.ghost.azrael.components.test;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\n\n@Slf4j\n@Component\npublic class TestComponent {\n\n    @StringFromResource(\"test\")\n    private String test;\n\n    @PostConstruct\n    public void init() {\n        System.out.println(test);\n    }\n\n    public void printAnnotationTest() {\n        log.info(test);\n    }\n}\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "spring",
        "create": "19.06.2022 03:31:14",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 21,
        "title": "Управление @Service из Property файла",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Чтобы определить какой сервис и когда должен запускаться, достаточно реализовать следующий пример:</p>\n<pre>\n<code class=\"java\">\n@Service\n@ConditionalOnProperty(prefix = \"orion.email\", name = \"mondayReport\", havingValue = \"true\")\npublic class SP1ReportControlServiceLayer implements SP1ReportControlService {\n\n}\n</code>\n</pre>\n<p class=\"gp\">А это сервис №2:</p>\n<pre>\n<code class=\"java\">\n@Service\n@ConditionalOnProperty(prefix = \"orion.email\", name = \"mondayReport\", havingValue = \"false\")\npublic class SP1ReportControlServiceLayerFake extends SP1ReportControlServiceLayer {\n\n    @Autowired\n    public SP1ReportControlServiceLayerFake(AvayaReportControlSP1Service avayaReportControlSP1Service,\n                                            NotificationSender notificationSender,\n                                            AddressesByAddressListType addressListType,\n                                            @Value(\"${orion.email.from}\") String fromMail) {\n        super(avayaReportControlSP1Service, notificationSender, addressListType, fromMail);\n    }\n}\n</code>\n</pre>\n</div>\n",
        "author": "admin",
        "userId": 1,
        "category": "spring",
        "create": "19.06.2022 03:30:00",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 20,
        "title": "Builder с приостановленным .build",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Мы можем начать заполнение обьекта и закрыть .build в месте вызова. Для создания незаконченного Builder можно выполнить следующий код:</p>\n<pre>\n<code class=\"java\">\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@Builder\npublic class ReportToEmail {\n\n    @NonNull\n    private Set<String> recipientsMail;\n    private String senderMail;\n    @NonNull\n    private String serviceName;\n    @NonNull\n    private String subject;\n    private String text;\n    private String zipName;\n    private Integer daysOfLife;\n    @NonNull\n    private List<RequestReportDto> reports;\n\n    public EmailMessage.EmailMessageBuilder buildEmail(String reportServiceName) {\n        return EmailMessage\n                .builder()\n                .recipientsMail(this.getRecipientsMail())\n                .senderMail(this.getSenderMail())\n                .subject(this.getSubject())\n                .text(this.getText())\n                .zipName(this.getZipName())\n                .serviceName(this.getServiceName() + \"\\\\\" + reportServiceName);\n    }\n}\n</code>\n</pre>\n</div>\n",
        "author": "admin",
        "userId": 1,
        "category": "java",
        "create": "19.06.2022 03:33:31",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 19,
        "title": "JSON та экране браузера",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Чтобы вывести JSON на экран браузера, достаточно в прописать следующий код:</p>\n<pre>\n<code class=\"javascript\">\nJSON.stringify(data, null, 4)\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "js",
        "create": "23.06.2022 03:48:14",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 18,
        "title": "Реализация паттерна Builder",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">\n    Реализация паттерна Builder довольно проста. Для этого нам потребуется создать вложенный статический класс, и\n    реализовать конструктор с ним в основном классе. С помощью данного конструктора мы сможем заполнять поля класса.\n</p>\n<pre>\n<code class=\"java\">\n    package ru.ghost.dto;\n    public class DataDto {\n        private final Long id;\n        private final String title;\n        private final String text;\n        private DataDto(final Builder builder) {\n            this.id = builder.id;\n            this.title = builder.title;\n            this.text = builder.text;\n        }\n        public static class Builder {\n            private Long id;\n            private String title;\n            private String text;\n            public Builder id(final long id) {\n                this.id = id;\n                return this;\n            }\n            public Builder title(final String title) {\n                this.title = title;\n                return this;\n            }\n            public Builder text(final String text) {\n                this.text = text;\n                return this;\n            }\n            public DataDto build() {\n                return new DataDto(this);\n            }\n        }\n    }\n</code>\n</pre>\n<p class=\"gp\">\n    Теперь мы можем воспользоваться данным Builder.\n</p>\n<pre>\n<code class=\"java\">\n    new DataDto.Builder().id(1L).title(\"title\").text(\"text\").build();\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "java",
        "create": "24.06.2022 03:30:30",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 17,
        "title": "Свой WEB фильтр авторизации",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Для создания своего WEB фильтра достаточно реализовать имплементацию следующего интерфейса:</p>\n<pre>\n<code class=\"java\">\n    package ru.ghost.azrael.config;\n\n    import io.micrometer.core.instrument.util.StringUtils;\n    import lombok.RequiredArgsConstructor;\n    import lombok.extern.slf4j.Slf4j;\n    import org.springframework.stereotype.Component;\n    import ru.ghost.azrael.dto.UserData;\n    import ru.ghost.azrael.service.JwtTokenUtil;\n\n    import javax.servlet.*;\n    import javax.servlet.annotation.WebFilter;\n    import javax.servlet.http.Cookie;\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n    import java.io.IOException;\n    import java.util.Arrays;\n\n    @Slf4j\n    @Component\n    @RequiredArgsConstructor\n    @WebFilter(urlPatterns = \"/**\")\n    public class AuthFiles implements Filter {\n\n        private final JwtTokenUtil jwtTokenUtil;\n\n        @Override\n        public void init(FilterConfig filterConfig) throws ServletException {\n            Filter.super.init(filterConfig);\n        }\n\n        @Override\n        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException {\n\n                HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n                HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n                String url = httpServletRequest.getRequestURI();\n                String method = httpServletRequest.getMethod();\n                Cookie[] cookies = httpServletRequest.getCookies();\n                UserData userData = null;\n                String userToken = null;\n            try {\n                if ((url.equals(\"/api/v1/auth/\") && method.equals(\"POST\")) || url.equals(\"/actuator/prometheus\")) {\n                    chain.doFilter(request, response);\n                    return;\n                }\n\n                if (cookies != null) {\n                    userToken = Arrays.stream(cookies)\n                            .filter(cookie -> cookie.getName().equals(\"userToken\"))\n                            .map(Cookie::getValue)\n                            .findAny()\n                            .orElse(null);\n                }\n\n                if (StringUtils.isNotBlank(userToken))\n                    userData = jwtTokenUtil.getJwtToken(userToken);\n\n                if (userData != null) {\n                    httpServletRequest.setAttribute(\"userData\", userData);\n                    chain.doFilter(request, response);\n                } else\n                    httpServletResponse.sendError(401, \"Jwt is not valid!\");\n            } catch (Exception e) {\n                log.error(e.getMessage(), e);\n                httpServletResponse.sendError(401, \"Jwt is not valid!\");\n            }\n        }\n\n        @Override\n        public void destroy() {\n            Filter.super.destroy();\n        }\n    }\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "spring",
        "create": "24.06.2022 03:50:59",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 16,
        "title": "Реализация чтения из ресурсов файлов и преобразование в байты",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">\n    Простейшая реализация чтения файла из ресурса и преобразование в байты.\n</p>\n<pre>\n<code class=\"java\">\n    Path path = Path.of(ClassLoader.getSystemResource(\"test.txt\").getPath());\n\n    List<EmailFileData> files = IntStream.range(1, 100)\n            .mapToObj(i -> {\n                try {\n                    return EmailFileData\n                            .builder()\n                            .fileName(\"test%s%s.txt\".formatted(integ, i))\n                            .fileData(Files.readAllBytes(path))\n                            .build();\n                } catch (IOException e) {\n                    return null;\n                }\n            })\n            .filter(Objects::nonNull)\n            .toList();\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "java",
        "create": "24.06.2022 03:58:29",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 15,
        "title": "Изменение потока sout",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Изменение стандартного потока ввода вывода на свой, достаточно реализовать следующий алгоритм:</p>\n<pre>\n<code class=\"java\">\n    package com.javarush.task.task19.task1911;\n\n    import java.io.ByteArrayOutputStream;\n    import java.io.PrintStream;\n    import java.util.Locale;\n    \n    /* \n    Ридер обертка\n    */\n    \n    public class Solution {\n        public static TestString testString = new TestString();\n    \n        public static void main(String[] args) {\n    \n            PrintStream printStream = System.out;\n    \n            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n            PrintStream stream = new PrintStream(byteArrayOutputStream);\n            System.setOut(stream);\n            testString.printSomething();\n            String result = byteArrayOutputStream.toString().toUpperCase(Locale.ROOT);\n            System.setOut(printStream);\n            System.out.println(result);\n        }\n    \n        public static class TestString {\n            public void printSomething() {\n                System.out.println(\"it's a text for testing\");\n            }\n        }\n    }\n</code>\n</pre>\n</div>\n",
        "author": "admin",
        "userId": 1,
        "category": "java",
        "create": "24.06.2022 05:29:08",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 14,
        "title": "Парсинг строки с заменой цифр на слова",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Интересная задачка с интересной реализацией, может пригодится:</p>\n<pre>\n<code class=\"java\">\n    package com.javarush.task.task19.task1924;\n\n    import java.io.*;\n    import java.util.HashMap;\n    import java.util.Map;\n\n    /* \n    Замена чисел\n    */\n\n    public class Solution {\n        public static Map<Integer, String> map = new HashMap<Integer, String>();\n\n        static {\n            map.put(0, \"ноль\");\n            map.put(1, \"один\");\n            map.put(2, \"два\");\n            map.put(3, \"три\");\n            map.put(4, \"четыре\");\n            map.put(5, \"пять\");\n            map.put(6, \"шесть\");\n            map.put(7, \"семь\");\n            map.put(8, \"восемь\");\n            map.put(9, \"девять\");\n            map.put(10, \"десять\");\n            map.put(11, \"одиннадцать\");\n            map.put(12, \"двенадцать\");\n        }\n\n        public static void main(String[] args) throws IOException {\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n            try (BufferedReader file = new BufferedReader(new FileReader(reader.readLine()))) {\n\n                while (file.ready()) {\n                    String line = file.readLine();\n                    for (Map.Entry<Integer, String> pair : map.entrySet())\n                        line = line.replaceAll(\"\\\\b\" + pair.getKey().intValue() + \"\\\\b\", pair.getValue());\n                    System.out.println(line);\n                }\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            reader.close();\n        }\n    }\n</code>\n</pre>\n</div>\n",
        "author": "admin",
        "userId": 1,
        "category": "java",
        "create": "24.06.2022 05:32:22",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 13,
        "title": "Копирование файла стандартными средствами java на простейшем уровне)))",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Копирование файла с использованием стандартных средств java и отображение результата в консоли:</p>\n<pre>\n<code class=\"java\">  \n    import java.io.*;\n    import java.util.Date;\n\n    public class Solution {\n        public static void main(String[] args) {\n\n            FileInputStream fileInput = null;\n            BufferedInputStream inputStream;\n            FileOutputStream fileOutput = null;\n            BufferedOutputStream outputStream;\n\n            try {\n                fileInput = new FileInputStream(\"Z:\\\\KhabarovVV\\\\VSCode-win32-x64-1.57.1.zip\");\n                inputStream = new BufferedInputStream(fileInput);\n                fileOutput = new FileOutputStream(\"Z:\\\\KhabarovVV\\\\test\\\\VSCode-win32-x64-1.57.1.zip\");\n                outputStream = new BufferedOutputStream(fileOutput);\n                long size = fileInput.available();\n                long start = new Date().getTime();\n                char s = '\\u2591';\n                char d = '\\u2592';\n                float b = 0;\n\n                while (inputStream.available() > 0) {\n                    outputStream.write(inputStream.read());\n                    long data = inputStream.available();\n                    if ((100 - (data * 1.0 / size) * 100) > b) {\n                        b = (float) (b + 0.1);\n                        System.out.print( String.format(\"%.1f\", b) + \"% \");\n                        for (byte i = 0; i < 100; i++) {\n                            if ((int)b > i)\n                                System.out.print(d);\n                            else\n                                System.out.print(s);\n                        }\n                        System.out.print(\" \" + String.format(\"%.2f\", ((float) size - data) / 1024 / 1024) + \" MB\");\n                        if (data > 0)\n                            System.out.print(\"                      \\r\");\n                        else\n                            System.out.print(\"                      \\n\");\n                    }\n                }\n\n                System.out.println(\"Копирование файла размером \" + size + \" завершилось за \" + ((new Date().getTime() - start) / 1000) + \" секунды\");\n\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    if (fileInput != null) {\n                        fileInput.close();\n                    }\n\n                    if (fileOutput != null) {\n                        fileOutput.close();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n</code>\n</pre>\n</div>\n",
        "author": "admin",
        "userId": 1,
        "category": "java",
        "create": "24.06.2022 05:37:40",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 12,
        "title": "Feign своими руками - это просто",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Для создания своего HTTP запроса с параметрами на передачу и получение достаточно реализовать следующий класс:</p>\n<pre>\n<code class=\"java\">  \n    package ru.ghost.informing.feign;\n\n    import org.springframework.beans.factory.annotation.Value;\n    import org.springframework.core.ParameterizedTypeReference;\n    import org.springframework.http.*;\n    import org.springframework.stereotype.Service;\n    import org.springframework.web.client.RestTemplate;\n    import ru.ghost.core.DefaultRestResponseFactory;\n    import ru.ghost.dto.integration.RestResponse;\n    import ru.ghost.dto.notification.sms_center.SmsCenterRequestDto;\n    import ru.ghost.dto.notification.sms_center.SmsCenterResponseDto;\n    import ru.ghost.dto.notification.sms_center.SmsCenterStatusResponseDto;\n    import ru.ghost.service.core.logger.ZeusLogger;\n\n    @Service\n    public class SmsCenterFeignImpl implements SmsCenterFeign {\n\n        @Value(\"${ghost.ghostSmsService}\")\n        private String ghostSmsServiceURL;\n\n        @Value(\"${ghost.remoteToken}\")\n        private String remoteToken;\n\n        private final ZeusLogger logger;\n\n        public SmsCenterFeignImpl(ZeusLogger logger) {\n            this.logger = logger;\n        }\n\n\n        @Override\n        public RestResponse<SmsCenterResponseDto> sendMessageSmsCenter(SmsCenterRequestDto message) {\n\n            try {\n                final HttpHeaders httpHeaders = new HttpHeaders();\n                httpHeaders.add(\"Content-Type\", \"application/json\");\n\n                final ResponseEntity<RestResponse<SmsCenterResponseDto>> response = new RestTemplate().exchange(\n                    ghostSmsServiceURL + \"/ghost/send/\" + remoteToken,\n                    HttpMethod.POST,\n                    new HttpEntity<>(message, httpHeaders),\n                    new ParameterizedTypeReference<RestResponse<SmsCenterResponseDto>>() {});\n\n                return response.getStatusCode().equals(HttpStatus.OK)\n                    ? response.getBody()\n                    : DefaultRestResponseFactory.defaultErrorResponse();\n            } catch (Exception e) {\n                logger.error(e);\n                throw new RuntimeException(e);\n            }\n        }\n\n        @Override\n        public RestResponse<SmsCenterStatusResponseDto> getStatusMessageSmsCenter(SmsCenterRequestDto message) {\n\n            try {\n                final HttpHeaders httpHeaders = new HttpHeaders();\n                httpHeaders.add(\"Content-Type\", \"application/json\");\n\n                final ResponseEntity<RestResponse<SmsCenterStatusResponseDto>> response = new RestTemplate().exchange(\n                    ghostSmsServiceURL + \"/ghost/status/\" + remoteToken,\n                    HttpMethod.POST,\n                    new HttpEntity<>(message, httpHeaders),\n                    new ParameterizedTypeReference<RestResponse<SmsCenterStatusResponseDto>>() {});\n\n                return response.getStatusCode().equals(HttpStatus.OK)\n                    ? response.getBody()\n                    : DefaultRestResponseFactory.defaultErrorResponse();\n            } catch (Exception e) {\n                logger.error(e);\n                throw new RuntimeException(e);\n            }\n        }\n    }\n</code>\n</pre>\n<p class=\"gp\">Если нам не нужно принять никаких данных то тут еще проще:</p>\n<pre>\n<code class=\"java\">  \n    try {\n        final HttpHeaders httpHeaders = new HttpHeaders();\n        httpHeaders.add(\"Content-Type\", \"application/json\");\n        httpHeaders.add(\"Integration-Token\", \"ghost\");\n\n        new RestTemplate().exchange(\n                \"http://localhost:9758/email\",\n                HttpMethod.POST,\n                new HttpEntity<>(EmailMessage.builder()\n                        .serviceName(\"OrionAvayaIntegration\")\n                        .recipientsMail(Collections.singletonList(\"ghost_83@mail.ru\"))\n                        .subject(\"Сокеты\")\n                        .text(String.format(\"Номеров операторов в кэше: %s.\", \"Не получили, печалька(((\")\n                                + String.format(\"Web socket connections: %s\", \"Не получили, печалька(((\"))\n                        .build(), httpHeaders),\n                new ParameterizedTypeReference<Void>() {\n                });\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n    }\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "spring",
        "create": "31.07.2022 11:32:20",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 11,
        "title": "Переменные в Bash",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Работа с переменными в Bash довольно проста:</p>\n<pre>\n<code class=\"bash\">  \n    #!/bin/bash\n    name=\"Slava\"\n    x=5\n    y=7\n\n    new=$x+$y\n    new2=$(($x+$y))\n\n    echo $new\n    echo $new2\n\n    # Текс\n    # \\033[30m - чёрный\n    # \\033[31m - красный\n    # \\033[32m - зелёный\n    # \\033[33m - желтый\n    # \\033[34m - синий\n    # \\033[35m - фиолетовый\n    # \\033[36m - голубой\n    # \\033[37m - серый\n    # Фон\n    # \\033[40m - чёрный\n    # \\033[41m - красный\n    # \\033[42m - зелёный\n    # \\033[43m - желтый\n    # \\033[44m - синий\n    # \\033[45m - фиолетовый\n    # \\033[46m - голубой\n    # \\033[47m - серый\n    # На все\n    # \\033[0m - сбросить все до значений по умолчанию\n    echo $name\n    echo -e \"\\033[32mПривет $name!\\033[0m\"\n    echo 'Привет $name!'\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "bash",
        "create": "12.08.2022 15:13:22",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 10,
        "title": "If в Bash",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">If в Bash как и везде но есть особенности по сравнению:</p>\n<pre>\n<code class=\"bash\">  \n    #!/bin/bash\n    echo -n \"Введите свой возраст: \"\n    read age\n\n    #  -lt меньше\n    #  -gt больше\n    #  -le меньше ли равно\n    #  -ge больше или равно\n    #  -eq равно(как ===)\n    if [[ $age -ge 0 ]] && [[ $age -lt 12 ]]; then\n        echo \"Вы еще ребенок!\"\n\n    elif [[ $age -ge 12 ]] && [[ $age -lt 18 ]]; then\n        echo \"Вы подросток!\"\n\n    elif [[ $age -ge 18 ]] && [[ $age -lt 60 ]]; then\n        echo \"Вы взрослый!\"\n\n    else\n        echo \"Вы супер стар!\"\n    fi\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "bash",
        "create": "12.08.2022 15:36:41",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 9,
        "title": "Case в Bash",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Case он и в африке case:</p>\n<pre>\n<code class=\"bash\">  \n    #!/bin/bash\n    echo -n \"Введите марку телефона: \"\n    read brand\n\n    case $brand in\n        samsung)\n            echo \"Скидка 30%\";;\n        nokia)\n            echo \"Скидка 20%\";;\n        huawei)\n            echo \"Crblrf 10%\";;\n        *)\n            echo \"На этот вид товара скидок нет!\";;\n    esac\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "bash",
        "create": "12.08.2022 15:38:41",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 8,
        "title": "Array в Bash",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Массивы спасут мир:</p>\n<pre>\n<code class=\"bash\">  \n    #!/bin/bash\n    # Чтобы явно объявить массив, используйте встроенную команду declare:\n    declare -a array_a=(3 4 \"test\" 56 \"test 2\" five)\n    # Так тоже работает, но ...\n    array=(3 4 \"test\" 56 \"test 2\" five)\n\n    array[3]=100000 # Меняем элемент массива\n\n    echo ${array[@]} # Вывести содержание всего массива\n    echo ${!array[@]} # Вывести индексы массива\n    echo ${#array[@]} # Вывести количество элементов массива\n    echo ${array[3]} # Вывести элемент массива\n    echo ${#array[4]} # Вывести длинну элемента массива\n\n    for i in ${!array_a[@]}; do\n        echo ${array_a[$i]}\n    done\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "bash",
        "create": "12.08.2022 15:40:27",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 7,
        "title": "For в Bash",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">А вот и for:</p>\n<pre>\n<code class=\"bash\">  \n    #!/bin/bash\n    n=0\n    array=(3 4 \"test\" 56 \"test 2\" five)\n\n    for (( i=0; i<${#array[@]}; i++ )); do\n        echo ${array[$i]};\n    done\n\n    for i in ${!array[@]} \n    do\n        echo ${array[$i]};\n    done\n\n    for i in ${array[@]}; \n    do\n        echo $i;\n    done\n\n    # Бесконечный цикл\n    #while :\n    #do\n    #  echo \"Press <CTRL+C> to exit.\"\n    #  sleep 1\n    #done\n\n    while [ $n -lt ${#array[@]} ]; do\n            echo ${array[$n]};\n            #n=$(( $n+1 ));\n            (( n++ ))\n            sleep 1; # Задержка в 1 секунду\n    done\n\n    # Чтение из файла\n    file=/etc/passwd\n\n    while IFS= read -r line; do\n    echo $line\n    done < \"$file\"\n\n    # Операторы break и continue могут использоваться для управления выполнением цикла while.\n    # break\n    i=0\n\n    while [ $i -lt 5 ]\n    do\n    echo \"Number: $i\"\n    ((i++))\n    if [[ \"$i\" == '2' ]]; then\n        break\n    fi\n    done\n\n    echo 'All Done!'\n\n    # continue\n    i=0\n\n    while [ $i -lt 5 ]\n    do\n    ((i++))\n    if [[ \"$i\" == '2' ]]; then\n        continue\n    fi\n    echo \"Number: $i\"\n    done\n\n    echo 'All Done!'\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "bash",
        "create": "12.08.2022 15:42:49",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 6,
        "title": "While в Bash",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Куда же без него:</p>\n<pre>\n<code class=\"bash\">  \n    #!/bin/bash\n    n=0\n    array=(3 4 \"test\" 56 \"test 2\" five)\n    while [ $n -lt ${#array[@]} ]; do\n            echo ${array[$n]};\n            #n=$(( $n+1 ));\n            (( n++ ))\n            sleep 1; # Задержка в 1 секунду\n    done\n\n    # Бесконечный цикл\n    while :\n    do\n    echo \"Press <CTRL+C> to exit.\"\n    sleep 1\n    done\n\n    # Чтение из файла\n    file=/etc/passwd\n    while IFS= read -r line; do\n    echo $line\n    done < \"$file\"\n\n    # Операторы break и continue могут использоваться для управления выполнением цикла while.\n    # break\n    i=0\n    while [ $i -lt 5 ]\n    do\n    echo \"Number: $i\"\n    ((i++))\n    if [[ \"$i\" == '2' ]]; then\n        break\n    fi\n    done\n    echo 'All Done!'\n\n    # continue\n    i=0\n    while [ $i -lt 5 ]\n    do\n    ((i++))\n    if [[ \"$i\" == '2' ]]; then\n        continue\n    fi\n    echo \"Number: $i\"\n    done\n    echo 'All Done!'\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "bash",
        "create": "12.08.2022 15:45:07",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 5,
        "title": "Функции в Bash",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Очень необычна реализация функций:</p>\n<pre>\n<code class=\"bash\">  \n    #!/bin/bash\n    # Функция должна быть обьявлена раньше чем ее вызовут\n    list_files() {\n        echo \"Выводим содержимое коталога:\";\n        cd;\n        ls;    \n    }\n    # В функции можно задавать значения переменной, а после их использовать\n    test_function () {\n    test_result=\"Переменная задана в функции\"\n    }\n\n    echo \"Значение = $test_result\"\n    test_function\n    echo \"Значение = $test_result\"\n\n    # Функция может возвращать значение через стандартный stdout с помощью echo(этот вариант более предпочтительней)\n    stdout_function () {\n    echo \"Переменная присвоена через stdout\"\n    }\n\n    stdout_result=\"$(stdout_function)\"\n    echo $stdout_result\n\n    # Функция с аргументами. $1, $2, $3 … $n\n    # Переменная $0 зарезервирована для имени функции.\n    # Переменная $# содержит количество позиционных параметров / аргументов, переданных функции\n    # Переменные $* и $@ содержат все позиционные параметры / аргументы, переданные функции.\n    #   В двойных кавычках \"$*\" заменяется одной строкой, разделенной пробелом (первый символ IFS) — \"$1 $2 $n\".\n    #   В двойных кавычках \"$@\" заменяется на отдельные строки — \"$1\" \"$2\" \"$n\".\n    #   Если не заключать в двойные кавычки, $* и $@ одинаковы.\n    print_data() {\n        echo \"Выводим данные: $1\"\n    }\n\n    list_files\n    print_data \"test\" \n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "bash",
        "create": "12.08.2022 15:48:22",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 4,
        "title": "Рекурсия в Bash",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">А это уже по взрослому:</p>\n<pre>\n<code class=\"bash\">  \n    #!/bin/bash\n    Examlpe() {\n        echo \"Сколько будет 2+2?\"\n        read answer\n        if [[ $answer == 4 ]]; then\n            echo \"Ответ верный.\"\n        else\n            echo \"Ответ не верный. Попробуйте еще раз.\"\n            echo\n            Examlpe\n        fi\n    }\n    echo \"Пример рекурсивной функции:\"\n    Examlpe\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "bash",
        "create": "12.08.2022 15:50:16",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 3,
        "title": "Работа с вводом и выводом в Bash",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">А вот и самое интересное:</p>\n<pre>\n<code class=\"bash\">  \n    #!/bin/bash\n    # > - если перенаправить поток в файл то онбудет перезаписан\n    # >> - если перенаправить поток в файл то онбудет записан в конец\n    echo \"1 строка\" > ./file.log\n    echo \"2 строка\" > ./file.log\n    echo \"3 строка\" >> ./file.log\n    echo \"4 строка\" >> ./file.log\n    echo \"5 строка\" >> ./file.log\n    # Чтение одной строки из файла\n    read text < ./file.log\n    echo $text\n    # Чтение построчно всего файла в терминал\n    cat < ./file.log\n    # Чтение при помощи цикла, данные можно записывать в массив только нужно организовать свой иттератор\n    while read text; do\n        echo $text\n    done < ./file.log\n\n    int=0\n    declare -a array\n    while read text; do\n        array[$int]=$text\n        (( int++ ))\n    done < ./file.log\n    echo \"$array это первый элемент, для получения остальных нужен цикл for\" \n\n    # Перенаправление потока из одной программы в другую используем конвеер |\n    cat file.log | while read index name; do\n        echo \"$index : $name\"\n    done\n\n    echo \"Поключенные разделы:\"\n    ls /dev | grep sd[a-z][1-9]\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "bash",
        "create": "12.08.2022 15:53:16",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 2,
        "title": "Переменные окружения в Bash",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">Данные переменные можно использовать в своих скриптах:</p>\n<ui>\n<li><b>USER:</b> текущее имя пользователя, использующего систему.</li>\n<li><b>EDITOR:</b> какая программа запускается для редактирования файла на вашем хосте.</li>\n<li><b>HOME:</b> домашний каталог текущего пользователя.</li>\n<li><b>PATH:</b> список каталогов, разделенных двоеточиями, в которых система ищет команды.</li>\n<li><b>PS1:</b> основная строка приглашения (для определения отображения приглашения оболочки).</li>\n<li><b>PS2:</b> то же, но для случаев использования нескольких строк.</li>\n<li><b>PWD:</b> текущий рабочий каталог.</li>\n<li><b>_:</b> самая последняя команда, выполненная в системе пользователем.</li>\n<li><b>MAIL:</b> путь к почтовому ящику текущего пользователя.</li>\n<li><b>SHELL:</b> оболочка, используемая для интерпретации команд в системе, она может быть много разных (например, bash, sh, zsh или другие).</li>\n<li><b>LANG:</b> кодировка языка, используемая в системе.</li>\n<li><b>DESKTOP_SESSION:</b> текущий рабочий стол, используемый на вашем хосте (GNOME, KDE).</li>\n<li><b>HISTFILESIZE:</b> количество строк истории команд, сохраненных в файле истории.</li>\n<li><b>HISTSIZE:</b> количество строк истории, разрешенных в памяти.</li>\n<li><b>UID:</b> текущий UID для пользователя.</li>\n<li><b>HOSTNAME:</b> имя компьютера системы.</li>\n<li><b>TERM:</b> указывает тип терминала.</li>\n<li><b>OLDPWD:</b> предыдущий рабочий каталог.</li>\n<li><b>BASH:</b> полный путь до исполняемого файла командной оболочки bash.</li>\n<li><b>BASHOPTS:</b> список параметров, которые использовались при выполнении bash.</li>\n<li><b>BASH_VERSION:</b> версия bash, выполняемая в удобочитаемой форме.</li>\n<li><b>BASH_VERSINFO:</b> версия bash с машиночитаемым выводом.</li>\n<li><b>COLUMNS:</b> Количество столбцов в ширину, которые используются для вывода вывода на экран.</li>\n<li><b>DIRSTACK:</b> стек каталогов, доступных с помощью команд pushd и popd.</li>\n<li><b>IFS:</b> внутренний разделитель полей для разделения ввода в командной строке. По умолчанию это пробел.</li>\n<li><b>SHELLOPTS:</b> параметры оболочки, которые можно установить с помощью параметра set.</li>\n<li><b>RANDOM:</b> случайное число в диапазоне от 0 до 32767.</li>\n<li><b>OSTYPE:</b> тип операционной системы.</li>\n<li><b>LS_COLORS:</b> коды, выделяющие различными цветами файлы в соответствии с их типом (для удобства восприятия больших объемов информации при беглом осмотре).</li>\n<li><b>PAGER:</b> указывает команду для запуска программы постраничного просмотра содержимого текстовых файлов, например, /bin/less.</li>\n<li><b>TZ:</b> может использоваться для установки временной зоны.</li>\n<li><b>VISUAL:</b> позволяет указать имя продвинутого текстового редактора для более сложных задач, например, редактирования почты. Это могут быть vi, vim, emacs и т. д.</li>\n</ui>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "bash",
        "create": "12.08.2022 16:04:07",
        "update": "28.08.2022 09:45:34",
        "active": true
    },
    {
        "id": 1,
        "title": "Авторизация по ключу SSH",
        "text": "<div style=\"font-size: smaller;\">\n<p class=\"gp\">И так, генерация ключей ssh выполняется командой:</p>\n<pre>\n<code class=\"shell\">  \n    ssh-keygen\n</code>\n</pre>\n<p class=\"gp\">Загружаем ключ а сервер:</p>\n<pre>\n<code class=\"shell\">  \n    ssh-copy-id username@remote_host\n</code>\n</pre>\n<p class=\"gp\">Если не получилось, то можно так:</p>\n<pre>\n<code class=\"bash\">  \n    cat ~/.ssh/id_rsa.pub | ssh username@remote_host \"mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\"\n</code>\n</pre>\n<p class=\"gp\">Отключаем проверку пароля:</p>\n<pre>\n<code class=\"shell\">  \n    sudo nano /etc/ssh/sshd_config\n</code>\n</pre>\n<pre>\n<code class=\"ssh\">  \n    PasswordAuthentication no\n</code>\n</pre>\n<p class=\"gp\">Теперь сохраните файл и перезапустите службу ssh:</p>\n<pre>\n<code class=\"shell\">  \n    sudo service ssh restart\n</code>\n</pre>\n</div>",
        "author": "admin",
        "userId": 1,
        "category": "ssh",
        "create": "14.08.2022 12:05:01",
        "update": "28.08.2022 09:45:34",
        "active": true
    }
]